// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for Prop Firm features
enum Phase {
  DEMO
  PHASE_1      // Challenge Phase 1
  PHASE_2      // Challenge Phase 2
  FUNDED       // Funded Account
  VERIFICATION // Verification phase
}

enum ChallengeStatus {
  ACTIVE       // In corso
  PASSED       // Superata
  FAILED       // Fallita
  COMPLETED    // Completata (funded)
  PAUSED       // In pausa
  EXPIRED      // Scaduta
}

enum AccountType {
  DEMO         // Account demo
  CHALLENGE    // Account challenge
  FUNDED       // Account funded
  EVALUATION   // Account in valutazione
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  accounts Account[]
  
  @@map("users")
}

model PropFirm {
  id            String   @id @default(cuid())
  name          String   @unique // "FTMO", "MyForexFunds", etc.
  website       String?
  logo          String?
  description   String?
  isActive      Boolean  @default(true)
  
  // Regole default della prop firm (JSON format)
  defaultRules  Json?    // Rules template
  
  accounts      Account[]
  challenges    Challenge[]
  templates     PropFirmTemplate[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("prop_firms")
}

// Nuovo modello per i template delle regole specifici
model PropFirmTemplate {
  id        String   @id @default(cuid())
  name      String   // "FTMO Challenge 100k", "MyFF Standard", etc.
  propFirmId String  // FK to PropFirm
  
  // Template specifico delle regole (JSON)
  rulesJson Json     // Regole dettagliate per questo template
  
  // Configurazione template
  accountSize      Float    // 100000, 200000, etc.
  currency         String   @default("USD")
  isActive         Boolean  @default(true)
  
  // Relations
  propFirm         PropFirm @relation(fields: [propFirmId], references: [id], onDelete: Cascade)
  accounts         Account[]
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@unique([propFirmId, name])
  @@map("prop_firm_templates")
}

model Account {
  id          String   @id @default(cuid())
  name        String?
  login       String   @unique
  broker      String
  server      String
  currency    String
  timezone    String
  userId      String
  
  // Prop Firm extensions (nullable for backward compatibility)
  propFirmId    String?
  accountType   AccountType? @default(DEMO)
  currentPhase  Phase?       @default(DEMO)
  
  // Balance info
  startBalance    Float?
  currentBalance  Float?
  initialBalance  Float?  // NUOVO: Balance iniziale per i calcoli delle regole
  
  // Challenge specific
  isChallenge   Boolean @default(false)
  isFunded      Boolean @default(false)
  
  // NUOVO: Template delle regole
  propFirmTemplateId String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  propFirm           PropFirm?         @relation(fields: [propFirmId], references: [id])
  propFirmTemplate   PropFirmTemplate? @relation(fields: [propFirmTemplateId], references: [id])
  trades             Trade[]
  metrics            Metric[]
  riskAlerts         RiskAlert[]
  challenges         Challenge[]
  
  @@map("accounts")
}

model Challenge {
  id              String   @id @default(cuid())
  accountId       String
  propFirmId      String
  
  // Challenge info
  phase           Phase
  startDate       DateTime
  endDate         DateTime?
  status          ChallengeStatus @default(ACTIVE)
  
  // Challenge rules (specific per questa challenge) - JSON format
  rules           Json?    // Regole specifiche
  
  // Target e limiti
  startingBalance Float
  profitTarget    Float?
  maxDailyLoss    Float?
  maxTotalLoss    Float?
  maxDrawdown     Float?
  minTradingDays  Int?     @default(0)
  
  // Progress tracking
  currentBalance  Float?
  currentPnL      Float    @default(0)
  currentDrawdown Float    @default(0)
  daysTraded      Int      @default(0)
  totalTrades     Int      @default(0)
  
  // Violations
  ruleViolations  Json?    // Array delle violazioni
  violationCount  Int      @default(0)
  
  // Relations
  account         Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  propFirm        PropFirm @relation(fields: [propFirmId], references: [id])
  trades          Trade[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("challenges")
}

model Trade {
  id            String   @id @default(cuid())
  ticketId      String   // MT5 ticket ID (unique per account+status)
  positionId    String
  orderId       String
  symbol        String
  side          String   // "buy" or "sell"
  volume        Float
  openTime      DateTime
  closeTime     DateTime?
  openPrice     Float
  closePrice    Float?
  sl            Float?
  tp            Float?
  commission    Float    @default(0)
  swap          Float    @default(0)
  taxes         Float    @default(0)
  pnlGross      Float    @default(0)
  comment       String?
  magic         Int?
  dealReason    String?
  closeReason   String?
  accountId     String
  
  // Prop Firm extensions (nullable for backward compatibility)
  tradePhase        Phase?           // Fase quando Ã¨ stato fatto il trade
  violatesRules     Boolean @default(false) // Viola regole prop firm
  ruleViolations    Json?            // Array delle regole violate
  equityAtOpen      Float?           // Equity al momento dell'apertura
  equityAtClose     Float?           // Equity al momento della chiusura
  drawdownAtOpen    Float?           // Drawdown % al momento dell'apertura
  drawdownAtClose   Float?           // Drawdown % al momento della chiusura
  dailyPnLAtOpen    Float?           // P&L giornaliero al momento dell'apertura
  dailyPnLAtClose   Float?           // P&L giornaliero al momento della chiusura
  isWeekendTrade    Boolean @default(false) // Trade nel weekend
  newsTime          Boolean @default(false) // Trade durante news ad alto impatto
  holdingTime       Int?             // Tempo di holding in minuti
  riskReward        Float?           // Risk/Reward ratio
  riskPercent       Float?           // % di rischio sul conto
  
  // Metadati challenge
  challengeId       String?          // FK a Challenge se applicabile
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  account       Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  challenge     Challenge? @relation(fields: [challengeId], references: [id])
  
  // Unique constraints
  @@unique([accountId, ticketId])  // Same ticketId allowed in different accounts
  @@map("trades")
}

model Metric {
  id                   String   @id @default(cuid())
  accountId            String
  date                 DateTime
  dailyPnL             Float
  cumulativePnL        Float
  maxDailyLoss         Float
  totalMaxLoss         Float
  currentDrawdown      Float
  maxDrawdown          Float
  profitTarget         Float?
  trailingDrawdown     Float?
  accountBalance       Float?
  equity               Float?
  freeMargin           Float?
  marginLevel          Float?
  
  // Prop Firm extensions (nullable for backward compatibility)
  challengeId          String?          // FK to Challenge if applicable
  phase                Phase?           // Phase during this metric calculation
  ruleViolations       Json?            // Rule violations for this day
  tradingDays          Int?             // Cumulative trading days
  
  updatedAt            DateTime @updatedAt
  
  // Relations
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@unique([accountId, date])
  @@map("metrics")
}

model RiskAlert {
  id        String   @id @default(cuid())
  accountId String
  severity  String   // 'CRITICAL' | 'WARNING' | 'INFO'
  type      String   // 'NO_SL' | 'OVEREXPOSED' | 'CORRELATION' | 'HIGH_RISK'
  message   String
  data      Json?    // Additional context data
  createdAt DateTime @default(now())
  resolved  Boolean  @default(false)
  
  // Relations
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  
  @@map("risk_alerts")
}